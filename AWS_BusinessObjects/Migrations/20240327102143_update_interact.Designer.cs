// <auto-generated />
using System;
using AWS_BusinessObjects.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWS_BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240327102143_update_interact")]
    partial class update_interact
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AdminAccount");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArtWorkStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ArtWorks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2494),
                            Description = "Description 1",
                            ImageUrl = "https://img.cdn-pictorem.com/uploads/collection/D/DN4DFF8JRC/900_Nature-Art_10.jpg",
                            IsDeleted = false,
                            Name = "ArtWork 1",
                            Price = 100f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2501),
                            Description = "Description 2",
                            ImageUrl = "https://i.ebayimg.com/images/g/pAUAAOSw5yJjhMYl/s-l1200.webp",
                            IsDeleted = false,
                            Name = "ArtWork 2",
                            Price = 200f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2508),
                            Description = "Description 3",
                            ImageUrl = "https://media.takealot.com/covers_images/0e56acf396604d34ac7c414b287c7cd7/s-pdpxl.file",
                            IsDeleted = false,
                            Name = "ArtWork 3",
                            Price = 300f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2512),
                            Description = "Description 4",
                            ImageUrl = "https://studio.pinotspalette.com/naperville/images/nap-uniquevangogh.jpg",
                            IsDeleted = false,
                            Name = "ArtWork 4",
                            Price = 400f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        },
                        new
                        {
                            Id = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2516),
                            Description = "Description 5",
                            ImageUrl = "https://www.singulart.com/images/artworks/v2/cropped/2479/main/carousel/1844446_b5d87c0efe493d715a1d57f480131a2f.jpeg",
                            IsDeleted = false,
                            Name = "ArtWork 5",
                            Price = 500f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2522),
                            Description = "Description 6",
                            ImageUrl = "https://images.saatchiart.com/saatchi/1093024/art/4707641/3777473-FIDYEXAV-7.jpg",
                            IsDeleted = false,
                            Name = "ArtWork 6",
                            Price = 600f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2527),
                            Description = "Description 7",
                            ImageUrl = "https://images.saatchiart.com/saatchi/770124/art/8867466/7930834-HSC00923-7.jpg",
                            IsDeleted = false,
                            Name = "ArtWork 7",
                            Price = 700f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2531),
                            Description = "Description 8",
                            ImageUrl = "https://scontent.fsgn5-3.fna.fbcdn.net/v/t1.6435-9/191815536_1305384429858113_8269960277638413432_n.jpg?_nc_cat=104&ccb=1-7&_nc_sid=5f2048&_nc_ohc=FYh3OT-x0AIAX-Z3VNM&_nc_ht=scontent.fsgn5-3.fna&oh=00_AfCifetKtGNeQBaVh8Yrx3lnW3U1CxznHdMAZMB1a1w5XA&oe=6623B508",
                            IsDeleted = false,
                            Name = "ArtWork 8",
                            Price = 800f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2535),
                            Description = "Description 9",
                            ImageUrl = "https://scontent.fsgn5-11.fna.fbcdn.net/v/t1.6435-9/107542684_1068121206917771_2494785157216852040_n.jpg?_nc_cat=110&ccb=1-7&_nc_sid=5f2048&_nc_ohc=o9rZ89Am3UEAX-VFzIF&_nc_ht=scontent.fsgn5-11.fna&oh=00_AfCNUsxrhFPBP5F0Yu-A-dnY-gT2TF8zwifP0MFBwfUTgQ&oe=66239792",
                            IsDeleted = false,
                            Name = "ArtWork 9",
                            Price = 900f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            ArtWorkStatus = 1,
                            CategoryId = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2540),
                            Description = "Description 10",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Vincent_Willem_van_Gogh_127.jpg/270px-Vincent_Willem_van_Gogh_127.jpg",
                            IsDeleted = false,
                            Name = "ArtWork 10",
                            Price = 1000f,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            UserOwnerId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ArtistAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8aaf6d84-410c-48d7-ad7c-5d70ce095e30"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2449),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("4f98d43f-e5a0-433d-b9a4-770f12380ad6"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2455),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cg"
                        },
                        new
                        {
                            Id = new Guid("51b6187b-d07c-4296-8475-cf3abd938e38"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2457),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ch"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("AudienceAccount");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eec442a9-ead8-4ad1-9230-f5506a0dcea6"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2474),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866ci"
                        },
                        new
                        {
                            Id = new Guid("1656ab00-86aa-466f-93c7-56eb2a7d7e69"),
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2477),
                            IsDeleted = false,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cj"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1799e22-2212-43d2-a09a-6a0371f2d89c"),
                            CategoryName = "Category 1",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2156),
                            Description = "Description Category 1",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b3cb8ee0-c965-4970-8ef0-baad50ebf987"),
                            CategoryName = "Category 2",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2184),
                            Description = "Description Category 2",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("53b50d7f-44eb-4dda-84b1-9d3c938eba22"),
                            CategoryName = "Category 3",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2187),
                            Description = "Description Category 3",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("58c96dfc-1c31-429b-9c6c-378db1c68b2a"),
                            CategoryName = "Category 4",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2190),
                            Description = "Description Category 4",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5d935698-bc0f-4692-88a3-43234943be40"),
                            CategoryName = "Category 5",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2192),
                            Description = "Description Category 5",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("26b5fcea-c9cb-4c7c-ad93-100a6d8611d6"),
                            CategoryName = "Category 6",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2194),
                            Description = "Description Category 6",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtWorkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLike")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ArtWorkID");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Interacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cfc7443-e9cb-4167-9621-75a194a3371f"),
                            ArtWorkID = new Guid("8e9acec5-54c9-4093-a450-19eb7b2109fb"),
                            Comment = "Comment 1",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2559),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("58b7083e-2df0-4f5a-b4ac-79ae4b6902ed"),
                            ArtWorkID = new Guid("26709dca-1906-4c50-a00e-1c63582ab644"),
                            Comment = "Comment 2",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2564),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("cd804807-65b7-4310-988e-94227f16fe92"),
                            ArtWorkID = new Guid("8c44d5c8-a738-4b65-a88e-3ed38fce88c4"),
                            Comment = "Comment 3",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2568),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("27cc3dae-f887-4990-9f97-f3c8bd097449"),
                            ArtWorkID = new Guid("7b76bf1f-d24c-4ac9-b466-4179e65605b2"),
                            Comment = "Comment 4",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2573),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("13af3978-3d66-4f60-9ee0-8cb1e5fc5640"),
                            ArtWorkID = new Guid("a25e170e-7ddc-4bdc-9215-51c6fb9bcd96"),
                            Comment = "Comment 5",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2576),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("1e207d4d-2fe6-4198-ae38-7c66b6e0b719"),
                            ArtWorkID = new Guid("b18dcaa1-d99a-4f15-a30c-5fd72c30280e"),
                            Comment = "Comment 6",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2580),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("e520675c-d9fc-4f02-926e-30701b8d3cae"),
                            ArtWorkID = new Guid("bd37c967-1817-495b-89eb-665c81b02d5e"),
                            Comment = "Comment 7",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2587),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("d9bc8bda-6b08-4534-8522-49a26f9e64a9"),
                            ArtWorkID = new Guid("1f35558f-a942-4837-81a4-720bae0e8bb1"),
                            Comment = "Comment 8",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2592),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("9fe6018a-55cb-417a-938b-092c77aa8d11"),
                            ArtWorkID = new Guid("9db314d0-6a55-492c-9a13-7ee6f2091cbf"),
                            Comment = "Comment 9",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2595),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        },
                        new
                        {
                            Id = new Guid("4c69f73d-0f6c-420f-a083-b87e6e2b0771"),
                            ArtWorkID = new Guid("d9d6b461-8efd-4395-8662-a58caa152200"),
                            Comment = "Comment 10",
                            Created = new DateTime(2024, 3, 27, 17, 21, 43, 572, DateTimeKind.Local).AddTicks(2599),
                            IsDeleted = false,
                            IsLike = true,
                            UserAccountId = "871a809a-b3fa-495b-9cc2-c5d738a866cf"
                        });
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ArtWorkID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuyerAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountIDReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("applicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("applicationUserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.WishList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ArtWorkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ArtWorkID");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28c1b75a-424d-43a7-8a51-eb53bffc48da",
                            Email = "hieu123@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d51ebd6f-02ac-4fc7-9f24-3e1f481f29eb",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu1"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cg",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2edb30fe-5b2d-41f0-ae21-fa7c86c51798",
                            Email = "hieuaccount2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0b70d44-47d0-4202-b57a-21c566dc2d3a",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu2"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ch",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2014f2e9-5ee3-49b0-9e2a-5b91cad50e27",
                            Email = "hieuaccount3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b78c2da4-ff79-48f0-a1c1-86fda6320749",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu3"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866ci",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "538a6f62-9592-4398-adde-9c5142889db7",
                            Email = "hieuaccount4@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5118f7e6-5e21-444d-9e3c-68a7f1dc8be4",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu4"
                        },
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cj",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4994d63b-7189-4f40-b67a-646399450712",
                            Email = "hieuaccount5@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "TRANHIEU5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07a2238f-b8c0-40ab-b891-691685feae70",
                            TwoFactorEnabled = false,
                            UserName = "TranHieu5"
                        });
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AdminAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AdminAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("ArtWorks")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.Category", "Category")
                        .WithMany("ArtWorks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtistAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("ArtistAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.AudienceAccount", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("AudienceAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Interact", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("Interacts")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "ApplicationUser")
                        .WithMany("Interacts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Order", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", "ArtWork")
                        .WithMany("Orders")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArtWork");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Report", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", "applicationUser")
                        .WithMany("Reports")
                        .HasForeignKey("applicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.WishList", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany("WishLists")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("AWS_BusinessObjects.Entities.ArtWork", null)
                        .WithMany("WishLists")
                        .HasForeignKey("ArtWorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AWS_BusinessObjects.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.ArtWork", b =>
                {
                    b.Navigation("Interacts");

                    b.Navigation("Orders");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Entities.Category", b =>
                {
                    b.Navigation("ArtWorks");
                });

            modelBuilder.Entity("AWS_BusinessObjects.Identity.ApplicationUser", b =>
                {
                    b.Navigation("AdminAccounts");

                    b.Navigation("ArtWorks");

                    b.Navigation("ArtistAccounts");

                    b.Navigation("AudienceAccounts");

                    b.Navigation("Interacts");

                    b.Navigation("Orders");

                    b.Navigation("Reports");

                    b.Navigation("WishLists");
                });
#pragma warning restore 612, 618
        }
    }
}
